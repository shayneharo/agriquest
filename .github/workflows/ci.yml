name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy
          pip install -r requirements_optimized.txt

      - name: Code formatting check (Black)
        run: black --check backend/ tests/

      - name: Import sorting check (isort)
        run: isort --check-only backend/ tests/

      - name: Linting (Flake8)
        run: flake8 backend/ tests/ --max-line-length=100 --ignore=E203,W503

      - name: Type checking (MyPy)
        run: mypy backend/ --ignore-missing-imports

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety
          pip install -r requirements_optimized.txt

      - name: Security scan (Bandit)
        run: bandit -r backend/ -f json -o bandit-report.json

      - name: Dependency vulnerability scan (Safety)
        run: safety check --json --output safety-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: agriquest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_optimized.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_optimized.txt
          pip install pytest pytest-cov pytest-mock pytest-flask

      - name: Set up test environment
        run: |
          mkdir -p logs
          touch logs/audit.log
          touch logs/agriquest.log

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/agriquest_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          FLASK_ENV: testing
        run: |
          pytest tests/test_models.py tests/test_security.py -v --cov=backend --cov-report=xml

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/agriquest_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          FLASK_ENV: testing
        run: |
          pytest tests/test_controllers.py -v --cov=backend --cov-append

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            htmlcov/

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements_optimized.txt
          pip install locust

      - name: Run performance tests
        run: |
          # Start application in background
          python run.py &
          sleep 10
          
          # Run load tests
          locust -f tests/performance/locustfile.py --headless -u 100 -r 10 -t 60s --html performance-report.html
          
          # Stop application
          pkill -f "python run.py"

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.html

  # Build and Test Docker Image
  docker:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: agriquest:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Run container
          docker run -d --name agriquest-test -p 5000:5000 agriquest:test
          
          # Wait for application to start
          sleep 30
          
          # Test health endpoint
          curl -f http://localhost:5000/health || exit 1
          
          # Cleanup
          docker stop agriquest-test
          docker rm agriquest-test

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f docker-compose.staging.yml up -d

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke tests here
          # Example: curl -f https://staging.agriquest.com/health

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/
          # Example: docker-compose -f docker-compose.prod.yml up -d

      - name: Run health checks
        run: |
          echo "Running health checks on production..."
          # Add health checks here
          # Example: curl -f https://agriquest.com/health

      - name: Notify deployment
        run: |
          echo "Production deployment completed successfully!"
          # Add notification logic here (Slack, email, etc.)

  # Security and Compliance
  compliance:
    runs-on: ubuntu-latest
    needs: [security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download security reports
        uses: actions/download-artifact@v3
        with:
          name: security-reports

      - name: Check security compliance
        run: |
          # Check if security reports meet compliance requirements
          python -c "
          import json
          
          # Check Bandit results
          with open('bandit-report.json', 'r') as f:
              bandit_results = json.load(f)
          
          high_severity_issues = [issue for issue in bandit_results['results'] 
                                if issue['issue_severity'] == 'HIGH']
          
          if high_severity_issues:
              print(f'Found {len(high_severity_issues)} high severity security issues')
              exit(1)
          
          # Check Safety results
          with open('safety-report.json', 'r') as f:
              safety_results = json.load(f)
          
          if safety_results:
              print(f'Found {len(safety_results)} vulnerable dependencies')
              exit(1)
          
          print('Security compliance check passed')
          "

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [test, security, docker, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify results
        run: |
          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ]; then
            echo "✅ All checks passed successfully!"
          else
            echo "❌ Some checks failed. Please review the results."
            exit 1
          fi

